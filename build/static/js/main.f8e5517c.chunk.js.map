{"version":3,"sources":["images/pictari-icon-600.svg","images/pictari-icon-400.svg","SplashScreen.js","Picture.js","SetOfPictures.js","LoadedPictures.js","Pictari.js","ScoreDisplay.js","PlayerSearchBar.js","api-services/JsonPayload.js","api-services/ImagePayload.js","api-services/ImageService.js","api-services/PostPayload.js","LevelOne.js","BootScreen.js","StartButton.js","GameStartScreen.js","GameOverScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","memo","className","src","icon","alt","Picture","data_uri","this","SetOfPictures","linkForApi","small","medium","large","link","set","getSet","push","LoadedPictures","props","handleDelete","index","onPlayerDeletedPic","render","map","setOfPics","key","toString","keysForCols","pic","getDataUri","deleteMode","type","value","onClick","e","target","bind","Component","Pictari","handlePictureDelete","onPictariDeletedPic","appendToClass","determineWhichPicToDelete","concat","join","pictariImage","width","height","x1","y1","x2","y2","ScoreDisplay","score","PlayerSearchBar","handleChange","event","setState","searchValue","handleClear","onSubmit","handleSubmit","state","onChange","onPlayerSubmittedPicSearch","preventDefault","JsonPayload","data","code","_links","ImagePayload","data_uris","ImageService","apiUrl","url","fetch","method","headers","then","res","json","body","JSON","stringify","catch","PostPayload","Player","LevelOne","handleDeleteFromPlayer","deletePics","componentWillUnmount","clearTimeout","errorMsgTimer","addingPicsScoreValue","deletingPicsScoreValue","maxLoadedSets","playerLost","playerWon","loadedSets","shouldDisplayLoader","shouldDisplayErrorMsg","picColKeys","player","imageService","pictureColKeys","payload","prevState","post","jsonPayload","throwError","imagePayload","newSet","uri","newSets","newPicColKeys","shift","length","handleNotSupportedError","indexToRemove","deleter","onPlayerLost","onPlayerWon","addToPrevScore","splice","delete","err","setTimeout","color","availablePics","style","margin","fontSize","addPics","BootScreen","Delay","ms","nextLineDelay","textToType","PureComponent","StartButton","blink","onPlayerClickedStart","text","GameStartScreen","componentDidMount","interval","setInterval","shouldStartButtonBlink","clearInterval","onPlayerStartedGame","App","startBootScreenTimer","bootScreenTimer","splashScreenTimer","gameOverScreenTimer","playerWonScreenTimer","handlePlayerStartedGame","shouldRenderLevelOneScreen","shouldRenderGameStartScreen","handlePlayerWon","handlePlayerLost","handlePlayerResetGame","window","location","reload","shouldRenderBootScreen","shouldRenderSplashScreen","startSplashScreenTimer","startGameOverScreenTimer","onPlayerResetGame","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f8e5517c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pictari-icon-600.82880424.svg\";","module.exports = __webpack_public_path__ + \"static/media/pictari-icon-400.58708e40.svg\";","import React from 'react';\nimport icon from './images/pictari-icon-600.svg';\nimport './SplashScreen.css';\n\nfunction SplashScreen() {\n    const title = \"Pictari Gaming Console\";\n    const subtitle = \"copyright (c) 1981\";\n    return <main>\n        <div className=\"splash-screen\">\n            <img className=\"splash-screen__brand-icon\" src={icon} alt=\"pictari brand icon\"></img>\n            <h1>{title}</h1>\n            <h2>{subtitle}</h2>\n        </div>\n    </main>;\n}\n\nexport default React.memo(SplashScreen);\n","/** Represents a picture of course */\nexport default class Picture\n{\n    /**\n     * \n     * @param {string} data_uri \n     */\n    constructor(data_uri) {\n        this.data_uri = data_uri;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getDataUri() {\n        return this.data_uri;\n    }\n}\n","/**\n * A set of small, medium, and large variations of a picture\n * @typedef {import('./Picture.js').default} Picture\n */\nexport default class SetOfPictures\n{\n    /**\n     * @type {string} link - Should be the url link\n     * @property\n     */\n    link = \"\";\n    /**\n     * @type {Picture[]} set\n     * @property\n     */\n    set = [];\n    /**\n     * @param {string} linkForApi - For deleting, et cetera\n     * @param {Picture} small\n     * @param {Picture} medium\n     * @param {Picture} large\n     */\n    constructor(linkForApi, small, medium, large)\n    {\n        this.link = linkForApi;\n        this.set.push(small);\n        this.set.push(medium);\n        this.set.push(large);\n    }\n\n    getSet = () => this.set;\n}\n","import React from 'react';\nimport './LoadedPictures.css';\n\nexport default class LoadedPictures extends React.Component\n{\n    constructor(props) {\n      super(props);\n      this.handleDelete.bind(this);\n    }\n\n    handleDelete = (index) => this.props.onPlayerDeletedPic(index);\n\n    render = () =>\n          { return this.props.SetOfPictures.map((setOfPics, index) =>\n            <div key={index.toString()} className={`loaded-pictures__picture-set-column at-col-${this.props.keysForCols[index]}`}>\n                {setOfPics.getSet().map((pic, index) => \n                    <img\n                      key={index.toString()} \n                      src={pic.getDataUri()}\n                      className=\"loaded-pictures__picture-set__thumbnail\"\n                      alt=\"a loaded pic\"/>\n                    )}\n                  {this.props.deleteMode && <button key={index.toString()} type=\"button\" className=\"loaded-pictures__delete-button\" value={index} onClick={(e) => this.handleDelete(e.target.value)}>Delete Pic</button>}\n              </div>\n          )}\n}\n","import React from 'react';\nimport pictariImage from './images/pictari-icon-400.svg';\nimport './Pictari.css';\n\n/**\n * Represents the UI and logic the game is using to play against the player\n */\nexport default class Pictari extends React.Component\n{\n    handlePictureDelete = (index)  => this.props.onPictariDeletedPic(index, this);\n\n    determineWhichPicToDelete() {\n        // need to implement\n        // this.props.availablePics\n        // throw Error(\"not implemented\");\n    }\n\n    render() {\n        let classes = [\"pictari-image-container\"]\n        const { deleteMode } = this.props;\n        const appendToClass = deleteMode ? \"moveDuringDeleteMode shootPics\" : \"moveBeforeDeleteMode\";\n        deleteMode && this.determineWhichPicToDelete();\n        return <span className={classes.concat([appendToClass]).join(\" \")}>\n            <img src={pictariImage} width=\"180\" alt=\"oops you won't be able to play the game without pictari\" />\n            <svg height=\"200\" width=\"20\">\n                <line x1=\"20\" y1=\"0\" x2=\"20\" y2=\"200\" />\n            </svg>\n        </span>\n    }\n}\n","import React from 'react';\n\nexport default class ScoreDisplay extends React.Component\n{\n    render() {\n        return <div className=\"score\">\n            <h1 className=\"score-title\">SCORE</h1>\n            <h1 className=\"score-number\">{this.props.score}</h1>\n        </div>;\n    }\n}\n","import React from 'react';\nimport './PlayerSearchBar.css';\n\nexport default class PlayerSearchBar extends React.Component\n{\n    constructor(props) {\n        super(props);\n        this.state = { searchValue: \"\" };\n        this.handleSubmit.bind(this);\n        this.handleSubmit.bind(this);\n        this.handleClear.bind(this);\n    }\n\n    handleSubmit(event) {\n        this.props.onPlayerSubmittedPicSearch(this.state.searchValue);\n        this.handleClear();\n        event.preventDefault(true);\n    }\n\n    handleChange = (event) => this.setState({searchValue: event.target.value});\n    handleClear = () => this.setState({searchValue: ''});\n\n    render = () => \n        <div>\n          <h4 className=\"player-hints\">Add Pics By Typing A URL</h4>\n          <form onSubmit={(e) => this.handleSubmit(e)}>\n              <p>\n                <input className=\"player-search-bar__submit-button\" type=\"submit\" value=\"Submit\"/>\n              </p>\n              <div className=\"player-search-bar\">\n                <input type=\"text\" value={this.state.searchValue} onChange={(e) => this.handleChange(e)}/>\n                <div className=\"player-search-bar__close\" onClick={this.handleClear}></div>\n              </div>\n          </form>\n        </div>\n}\n","export default class JsonPayload\n{\n    code;\n    _links;\n\n    constructor(data) {\n        this.code = data.code;\n        this._links = data._links;\n    }\n}\n","import JsonPayload from \"./JsonPayload\";\n\n/**\n * Represents the payload in a response from a GET request for an image\n */\nexport default class ImagePayload extends JsonPayload\n{\n    /**@type {string[]} data_uris */\n    data_uris;\n\n    /**@param {Object} - From JSON payload */\n    constructor(data) {\n        super(data);\n        this.data_uris = data.data_uris;\n    }\n}\n","import ImagePayload from './ImagePayload';\nimport JsonPayload from './JsonPayload';\n\nexport default class ImageService\n{\n    /**\n     * @property {string} apiUrl\n     */\n    apiUrl = process.env.NODE_ENV === 'development'\n        ? 'http://localhost:8080/images'\n        : 'https://pictari-ui.herokuapp.com/api/images'; // put this in config later\n\n    /**\n     * @param {string} url\n     * @returns {Promise<ImagePayload>}\n     */\n    fetch(url) {\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(res => res.json())\n        .then(json => new ImagePayload(json));\n    }\n\n    /**\n     * @param {JsonPayload} data\n     * @returns {Promise<JsonPayload>}\n     */\n    post(data) {\n        return fetch(this.apiUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n        .then(res => res.json())\n        .then(json => new JsonPayload(json))\n        .catch(() => new JsonPayload({code: 415, _links:[]}));\n    }\n\n    /**\n     * @param {string} url \n     * @returns {Promise<any}\n     */\n    delete(url) {\n        return fetch(url, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n    }\n}\n","import JsonPayload from './JsonPayload';\n\n/**\n * Represents the payload in the response of a POST request\n * \n * Should have links to the created object if successful\n */\nexport default class PostPayload extends JsonPayload\n{\n    /**\n     * @type {string}\n     * @property {string} url\n     */\n    url = \"\";\n    \n    /**\n     * \n     * @param {*} data \n     */\n    constructor(data) {\n        super(data);\n        this.url = data.url;\n    }\n}\n","import React from 'react';\nimport Picture from './Picture';\nimport SetOfPictures from './SetOfPictures';\nimport LoadedPictures from './LoadedPictures';\nimport Pictari from './Pictari';\nimport ScoreDisplay from './ScoreDisplay';\nimport PlayerSearchBar from './PlayerSearchBar';\nimport ImageService from './api-services/ImageService';\nimport PostPayload from './api-services/PostPayload';\nimport { FadeLoader } from 'halogenium';\nimport './LevelOne.css';\n\n/**@type Just using this to keep track of who is responsible for deleting a pic */\nclass Player {}\n\nexport default class LevelOne extends React.Component\n{\n    constructor(props) {\n        super(props);\n\n        this.addingPicsScoreValue = 200;\n        this.deletingPicsScoreValue = 500;\n        this.maxLoadedSets = 4;\n        this.playerLost = false;\n        this.playerWon = false;\n        this.state = {\n            loadedSets: [],\n            score: 0,\n            deleteMode: false,\n            shouldDisplayLoader: false,\n            shouldDisplayErrorMsg: false,\n            picColKeys: []\n        };\n        /**@type {Player} - Use to keep track of pictures deleted by the player */\n        this.player = new Player();\n        this.imageService = new ImageService();\n        this.handleDeleteFromPlayer.bind(this);\n        this.pictureColKeys = ['A', 'B', 'C', 'D'];\n    }\n\n    /**@param {string} url - For the API */\n    addPics(url) {\n        const payload = new PostPayload({url: url});\n        this.setState((prevState) => ({shouldDisplayLoader: !prevState.shouldDisplayLoader}));\n        this.imageService\n            .post(payload)\n            .then(jsonPayload => jsonPayload.code !== 415 ? jsonPayload._links[0] : (this.throwError(\"not supported\")))\n            .then(\n                link => this.imageService\n                    .fetch(link)\n                    .then(imagePayload => {\n                        const data_uris = imagePayload.data_uris;\n                        const newSet = new SetOfPictures(link, ...data_uris.map((uri) => new Picture(uri)));\n                        const newSets = [...this.state.loadedSets];\n                        const newPicColKeys = [...this.state.picColKeys];\n                        newSets.push(newSet);\n                        newPicColKeys.push(this.pictureColKeys.shift());\n                        this.setState((prevState) => ({\n                            loadedSets: newSets,\n                            picColKeys: newPicColKeys,\n                            score: prevState.score + this.addingPicsScoreValue,\n                            deleteMode: newSets.length === this.maxLoadedSets,\n                            shouldDisplayLoader: !prevState.shouldDisplayLoader\n                        }));\n                    })\n                ).catch(() => {\n                    this.setState({shouldDisplayLoader: false})\n                    this.handleNotSupportedError()\n                });\n    }\n\n    /**\n     * @param {int} indexToRemove\n     * @param {Object} deleter - Who is deleting the picture?\n     * */\n    deletePics(indexToRemove, deleter) {\n        let newSets = [...this.state.loadedSets];\n        let newPicColKeys = [...this.state.picColKeys];\n        const link = newSets[indexToRemove].link\n        // player loses if Pictari deletes one pic\n        this.playerLost = deleter instanceof Pictari && this.props.onPlayerLost(this);\n        this.playerWon = newSets.length < 2 && !this.playerLost && this.props.onPlayerWon();\n        const addToPrevScore = deleter instanceof Player ? this.deletingPicsScoreValue : 0;\n        // do this last\n        newSets.splice(indexToRemove, 1);\n        newPicColKeys.splice(indexToRemove, 1);\n        this.setState((prevState) => ({loadedSets: newSets, score: prevState.score + addToPrevScore, picColKeys: newPicColKeys}));\n        this.imageService.delete(link);\n    }\n\n    throwError(err) { throw err; }\n\n    handleNotSupportedError() {\n        this.setState({shouldDisplayErrorMsg: true});\n        this.errorMsgTimer = setTimeout(() => this.setState({shouldDisplayErrorMsg: false}), 5000);\n    }\n\n    handleDeleteFromPlayer = (index) => this.deletePics(index, new Player());\n\n    componentWillUnmount = () => clearTimeout(this.errorMsgTimer);\n\n    render() {\n        const { loadedSets, score, deleteMode, picColKeys, shouldDisplayLoader, shouldDisplayErrorMsg } = this.state;\n        const { playerWon } = this;\n        return <main className=\"level-one\">\n            <div className=\"loader-for-pics\">\n                {shouldDisplayLoader && <FadeLoader color=\"gray\" />}\n            </div>\n            <ScoreDisplay score={score}/>\n            { playerWon\n                ? (<div className=\"player-won-message\"><h1>You Win!</h1></div>)\n                : (<Pictari deleteMode={deleteMode} availablePics={loadedSets} onPictariDeletedPic={this.deletePics.bind(this)}/>)\n            }\n            <div style={{margin: \"1rem 0\"}}>\n                {shouldDisplayErrorMsg && <span style={{color: \"white\", fontSize: \"1.5rem\"}}>Are you sure that's a picture???</span>}\n            </div>\n            <LoadedPictures\n                keysForCols={picColKeys}\n                SetOfPictures={loadedSets}\n                deleteMode={deleteMode}\n                onPlayerDeletedPic={this.handleDeleteFromPlayer}/>\n            <div className=\"player-controls\">\n                { deleteMode || (<PlayerSearchBar onPlayerSubmittedPicSearch={this.addPics.bind(this)}/>) }\n            </div>\n        </main>\n    }\n}\n","import React from 'react';\nimport Typist from 'react-typist';\nimport './BootScreen.css'\n\nexport default class BootScreen extends React.PureComponent\n{\n    textToType() {\n        const nextLineDelay = 1000; // in ms\n        return <div>\n            <h1>FortmeyerOS v19903.390.02343111</h1>\n            <Typist.Delay ms={nextLineDelay}/>\n            <p>Booting kernel………………………………………………………………………………………………………………………………………………………………</p>\n            <Typist.Delay ms={nextLineDelay}/>\n            <p>Loading modules……………………………………………………………………………………………………………………………………………………………</p>\n            <Typist.Delay ms={nextLineDelay}/>\n            <p>Hold on...</p>\n            <Typist.Delay ms={nextLineDelay * 5}/>\n            <p>More modules to load...</p>\n            <Typist.Delay ms={nextLineDelay}/>\n            <p>Watching a video on YouTube...</p>\n            <Typist.Delay ms={nextLineDelay * 6}/>\n            <p>Ok I'm done.. logging stuff...</p>\n        </div>\n    }\n    render() {\n        return <main><div className=\"bootscreen\"><Typist>{this.textToType()}</Typist></div></main>;\n    }\n}\n","import React from 'react';\n\nexport default class StartButton extends React.PureComponent\n{\n    render() {\n        return this.props.blink && (\n          <button\n            className=\"start-button\"\n            type=\"button\"\n            onClick={(e) => this.props.onPlayerClickedStart(e)}>\n                <h2>{this.props.text}</h2>\n          </button>\n        )\n    };\n}\n","import React from 'react';\nimport StartButton from './StartButton';\nimport './GameStartScreen.css';\n\nexport default class GameStartScreen extends React.Component\n{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            shouldStartButtonBlink: false,\n        };\n    }\n\n    componentDidMount = () => {\n        this.interval = setInterval(() => {\n          this.setState((state, props) => {\n            return {\n              shouldStartButtonBlink: !state.shouldStartButtonBlink,\n            };\n          });\n        }, 500);\n    };\n      \n    componentWillUnmount = () => {\n        clearInterval(this.interval);\n    };\n\n    render() {\n        const title = \"Pictari\";\n        const shouldStartButtonBlink = this.state.shouldStartButtonBlink;\n        const startButtonText = \"Press Start\";\n        return <main className=\"game-start-screen\">\n            <div>\n                <div>\n                    <div className=\"game-start-screen__title-container\">\n                        <h1>{title}</h1>\n                    </div>\n                </div>\n                <StartButton\n                  blink={shouldStartButtonBlink}\n                  onPlayerClickedStart={(e) => this.props.onPlayerStartedGame(e)}\n                  text={startButtonText}/>\n            </div>\n        </main>;\n    }\n}\n","import React from 'react';\nimport './GameOverScreen.css';\n\nfunction GameOverScreen(props) {\n    const title = \"Game Over\";\n    return <main>\n        <div className=\"game-over-screen\">\n            <div className=\"game-over-screen__title-container\">\n                <h1>{title}</h1>\n            </div>\n        </div>\n    </main>;\n}\n\nexport default React.memo(GameOverScreen);\n","import React from 'react';\nimport SplashScreen from './SplashScreen';\nimport LevelOne from './LevelOne';\nimport BootScreen from './BootScreen';\nimport GameStartScreen from './GameStartScreen';\nimport GameOverScreen from './GameOverScreen';\nimport './App.css';\n\nexport default class App extends React.Component\n{\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldRenderBootScreen: true,\n      shouldRenderSplashScreen: false,\n      shouldRenderGameStartScreen: false,\n      shouldRenderLevelOneScreen: false,\n      playerLost: false,\n    }\n  }\n  \n  componentDidMount = () => {\n    // other timers will be started sequentially \n    // within the previous timer\n    this.startBootScreenTimer();\n  }\n\n  componentWillUnmount = () => {\n    clearTimeout(this.bootScreenTimer);\n    clearTimeout(this.splashScreenTimer);\n    clearTimeout(this.gameOverScreenTimer);\n    clearTimeout(this.playerWonScreenTimer);\n  }\n\n  startBootScreenTimer() {\n    const timeToBoot = 35000; // ms\n    // switch to splash screen\n    this.bootScreenTimer = setTimeout(() => {\n      this.setState((prevState) => ({\n          shouldRenderBootScreen: !prevState.shouldRenderBootScreen,\n          shouldRenderSplashScreen: !prevState.shouldRenderSplashScreen\n        }));\n      this.startSplashScreenTimer();\n    }, timeToBoot);\n  }\n\n  startSplashScreenTimer() {\n    const splashScreenRenderDuration = 5000; // ms\n    // switch to game start screen\n    this.splashScreenTimer = setTimeout(() => {\n      this.setState((prevState) => ({\n          shouldRenderSplashScreen: !prevState.shouldRenderSplashScreen,\n          shouldRenderGameStartScreen: !prevState.shouldRenderGameStartScreen\n        }));\n    }, splashScreenRenderDuration);\n  }\n\n  startGameOverScreenTimer() {\n    const gameOverScreenRenderDuration = 6000; // ms\n    this.gameOverScreenTimer = setTimeout(() => {\n      this.setState((prevState) => ({\n          shouldRenderGameStartScreen: !prevState.shouldRenderGameStartScreen,\n          playerLost: !prevState.playerLost\n      }));\n    },gameOverScreenRenderDuration);\n  }\n\n  handlePlayerStartedGame = () => this.setState(() => ({shouldRenderLevelOneScreen: true, shouldRenderGameStartScreen: false}));\n\n  handlePlayerWon = () => this.playerWonScreenTimer = setTimeout(() => this.setState({shouldRenderGameStartScreen: true, shouldRenderLevelOneScreen: false}), 3000)\n\n  handlePlayerLost = () => this.setState(() => ({playerLost: true, shouldRenderLevelOneScreen: false}));\n\n  handlePlayerResetGame = () => window.location.reload(false);\n\n  render() {\n    const {\n      shouldRenderBootScreen,\n      shouldRenderSplashScreen,\n      shouldRenderGameStartScreen,\n      shouldRenderLevelOneScreen,\n      playerLost\n    } = this.state;\n    playerLost && this.startGameOverScreenTimer();\n    return (shouldRenderBootScreen && <BootScreen/>)\n        || (shouldRenderSplashScreen && <SplashScreen/>)\n        || (shouldRenderGameStartScreen && <GameStartScreen onPlayerStartedGame={this.handlePlayerStartedGame.bind(this)}/>)\n        || (shouldRenderLevelOneScreen && (\n          <LevelOne\n            onPlayerStartedGame={this.handlePlayerStartedGame.bind(this)}\n            onPlayerResetGame={this.handlePlayerResetGame.bind(this)}\n            onPlayerWon={this.handlePlayerWon.bind(this)}\n            onPlayerLost={this.handlePlayerLost.bind(this)}/>\n        ))\n        || (playerLost && <GameOverScreen/>);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}